apiVersion: v1
data:
  instance.json: |-
    {
      "repo": "django/django",
      "instance_id": "django__django-16046",
      "base_commit": "ec13e801b820614ff374cb0046092caab8d67249",
      "patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -25,6 +25,8 @@ def format(\n         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\n     * thousand_sep: Thousand separator symbol (for example \",\")\n     \"\"\"\n+    if number is None or number == \"\":\n+        return mark_safe(number)\n     use_grouping = (\n         use_l10n or (use_l10n is None and settings.USE_L10N)\n     ) and settings.USE_THOUSAND_SEPARATOR\n",
      "test_patch": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -172,3 +172,7 @@ def __format__(self, specifier, **kwargs):\n \n         price = EuroDecimal(\"1.23\")\n         self.assertEqual(nformat(price, \",\"), \"\u20ac 1,23\")\n+\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n",
      "problem_statement": "Fix numberformat.py \"string index out of range\" when null\nDescription\n\t\nWhen:\nif str_number[0] == \"-\"\nencounters a number field that's null when formatting for the admin list_display this causes an \nIndexError: string index out of range\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\n",
      "hints_text": "proposed fix patch\nPlease provide a pull request, including a test.",
      "created_at": "2022-09-10T13:27:38Z",
      "version": "4.2",
      "FAIL_TO_PASS": "[\"test_empty (utils_tests.test_numberformat.TestNumberFormat)\"]",
      "PASS_TO_PASS": "[\"test_decimal_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_decimal_subclass (utils_tests.test_numberformat.TestNumberFormat)\", \"test_float_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_number (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_string (utils_tests.test_numberformat.TestNumberFormat)\", \"test_large_number (utils_tests.test_numberformat.TestNumberFormat)\"]",
      "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"
    }
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"instance.json":"{\n  \"repo\": \"django/django\",\n  \"instance_id\": \"django__django-16046\",\n  \"base_commit\": \"ec13e801b820614ff374cb0046092caab8d67249\",\n  \"patch\": \"diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\\n--- a/django/utils/numberformat.py\\n+++ b/django/utils/numberformat.py\\n@@ -25,6 +25,8 @@ def format(\\n         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\\n     * thousand_sep: Thousand separator symbol (for example \\\",\\\")\\n     \\\"\\\"\\\"\\n+    if number is None or number == \\\"\\\":\\n+        return mark_safe(number)\\n     use_grouping = (\\n         use_l10n or (use_l10n is None and settings.USE_L10N)\\n     ) and settings.USE_THOUSAND_SEPARATOR\\n\",\n  \"test_patch\": \"diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\\n--- a/tests/utils_tests/test_numberformat.py\\n+++ b/tests/utils_tests/test_numberformat.py\\n@@ -172,3 +172,7 @@ def __format__(self, specifier, **kwargs):\\n \\n         price = EuroDecimal(\\\"1.23\\\")\\n         self.assertEqual(nformat(price, \\\",\\\"), \\\"\\u20ac 1,23\\\")\\n+\\n+    def test_empty(self):\\n+        self.assertEqual(nformat(\\\"\\\", \\\".\\\"), \\\"\\\")\\n+        self.assertEqual(nformat(None, \\\".\\\"), \\\"None\\\")\\n\",\n  \"problem_statement\": \"Fix numberformat.py \\\"string index out of range\\\" when null\\nDescription\\n\\t\\nWhen:\\nif str_number[0] == \\\"-\\\"\\nencounters a number field that's null when formatting for the admin list_display this causes an \\nIndexError: string index out of range\\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\\n\",\n  \"hints_text\": \"proposed fix patch\\nPlease provide a pull request, including a test.\",\n  \"created_at\": \"2022-09-10T13:27:38Z\",\n  \"version\": \"4.2\",\n  \"FAIL_TO_PASS\": \"[\\\"test_empty (utils_tests.test_numberformat.TestNumberFormat)\\\"]\",\n  \"PASS_TO_PASS\": \"[\\\"test_decimal_numbers (utils_tests.test_numberformat.TestNumberFormat)\\\", \\\"test_decimal_subclass (utils_tests.test_numberformat.TestNumberFormat)\\\", \\\"test_float_numbers (utils_tests.test_numberformat.TestNumberFormat)\\\", \\\"test_format_number (utils_tests.test_numberformat.TestNumberFormat)\\\", \\\"test_format_string (utils_tests.test_numberformat.TestNumberFormat)\\\", \\\"test_large_number (utils_tests.test_numberformat.TestNumberFormat)\\\"]\",\n  \"environment_setup_commit\": \"0fbdb9784da915fce5dcc1fe82bac9b4785749e5\"\n}"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"instance-django--django-16046-configmap","namespace":"testbeds"}}
  creationTimestamp: "2024-07-19T14:30:14Z"
  name: instance-django--django-16046-configmap
  namespace: testbed-dev
  resourceVersion: "5590888"
  uid: add32eed-e94d-426c-ab8c-301cd44f7a4c
